#!/bin/bash
#############################################################
#							    #
# Matches the ordered error file of the current date        #
# with given file. requires current ordered error file      #
# if ordered file recreate required, send -o|--order        #
# with time out in minutes, if it is older, new one will    # 
# be created						    #
# If -u is given, checks for unmatched errors               #
#############################################################

#. /home/nagios/evam_shared/.evam_nagios.conf
source /etc/evam.conf


USAGE="`basename $0` [-f|--file]<fileToMatch> [-m|--match]<matchFile> [-w|--warning]<qsize> [-c|--critical]<qsize> [-o|--order]<reorderTimeOut> [--color] [-u|--unmatched]"
THRESHOLD_USAGE="WARNING threshold must be smaller than CRITICAL: `basename $0` $*"
MATCH_FILE=""
CHECK_UNMATCHED="false"
RECREATE_ORDERED_ERROR_FILE=""
RECREATE_TIMEOUT=0
ORDERED_ERROR_FILE=""
critical=""
warning=""
COLORED_OUTPUT="false"
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
# print usage
if [[ $# -lt 3 ]]
then
        echo ""
        echo "Wrong Syntax: `basename $0` $*"
        echo ""
        echo "Usage: $USAGE"
        echo ""
        exit 0
fi
# read input
while [[ $# -gt 0 ]]
  do
        case "$1" in
               -w|--warning)
               shift
               warning=$1
        ;;
               -c|--critical)
               shift
               critical=$1
        ;;
               --color)
               COLORED_OUTPUT="true"
        ;;
               -u|--unmatch)
               CHECK_UNMATCHED="true"
        ;;
               -f|--file)
               shift
               ORDERED_ERROR_FILE="$1"
        ;;
               -m|--match)
               shift
               MATCH_FILE="$1"
        ;;
               -o|--order)
               shift
               RECREATE_ORDERED_ERROR_FILE="true"
               RECREATE_TIMEOUT=$1
        ;;
        esac
        shift
  done
# verify input
if [[ $warning -eq $critical || $critical -lt $warning ]]
then
        echo ""
        echo "$THRESHOLD_USAGE"
        echo ""
        echo "Usage: $USAGE"
        echo ""
        exit "$critical"
fi

if [ "$COLORED_OUTPUT" = "true" ]
then
  COLOR_NONE='\e[0m'
  COLOR_RED='\e[0;31m'
  COLOR_LIGHT_RED='\e[0;33m'
fi

#############################################################################
#this is not very portable
#############################################################################
if [[ "$ORDERED_ERROR_FILE" == "" ]]
then
   TODAY_AS_FILENAME=`date '+%Y-%m-%d'`
   ORDERED_ERROR_FILE=`echo "$ORDERED_ERRORS.$TODAY_AS_FILENAME"`
fi

if [ "$RECREATE_ORDERED_ERROR_FILE" = "true" ]
then
  if [[ -e $ORDERED_ERROR_FILE ]]
  then
    SECONDS_OF_MODIFY=`stat --format=%Y $ORDERED_ERROR_FILE`
    CURRENT_SECONDS=`date '+%s'`
    DIFFERENCE=`expr $CURRENT_SECONDS "-" $SECONDS_OF_MODIFY`
    DIFFERENCE_IN_MINUTES=`expr $DIFFERENCE "/" 60`
    if [[ $DIFFERENCE_IN_MINUTES -gt $RECREATE_TIMEOUT ]]
    then
      $LOG_ERRORS > /dev/null
    fi
  fi
fi


if [[ ! -f "$MATCH_FILE" ]]
then
	echo -e "${COLOR_RED}Match file \"$MATCH_FILE\"could not be read.${COLOR_NONE}"
	exit "2"
fi

if [[ ! -f "$ORDERED_ERROR_FILE" ]]
then
	echo -e "${COLOR_RED}Ordered error file \"$ORDERED_ERROR_FILE\"could not be read.${COLOR_NONE}"
	exit "2"
fi


##############################################################################
#match name is used for graphs: for /home/evam/errors.daily, get errors.daily
MATCH_NAME=`basename $MATCH_FILE`
TOTAL_ERRORS=0
UNMATCHED_ERRORS=0
while read line;
do
  # the last line is "Total: #"
  # this must be passed, for unmatched analysis.
  case "$line" in
    *Total:*) continue ;;
  esac
  ERROR_COUNT=`echo $line | sed 's/^\s//g' | cut -d" " -f1`;
  ERROR_MESSAGE=`echo $line | sed 's/^\s//g' | cut -d" " -f2-`;
  #echo "$ERROR_COUNT";
  #echo "$ERROR_MESSAGE";
  IS_ERROR_MATCHED="false"
  while read match_line;
  do
    #echo "$match_line";
    if [[ "$match_line" = "$ERROR_MESSAGE" ]]
    then
      if [ "$COLORED_OUTPUT" = "true" ]
      then
        echo "match: $ERROR_MESSAGE"; #since this means output is to console, we can give more info
      fi
      IS_ERROR_MATCHED="true"
      TOTAL_ERRORS=`expr $TOTAL_ERRORS + $ERROR_COUNT`
      break;
    fi
  done < "$MATCH_FILE"
  if [ "$IS_ERROR_MATCHED" = "false" ]
  then
    if [ "$COLORED_OUTPUT" = "true" ]
    then
      echo "unmatch: $ERROR_MESSAGE"; #since this means output is to console, we can give more info
    fi
    UNMATCHED_ERRORS=`expr $UNMATCHED_ERRORS + $ERROR_COUNT`
  fi
done < "$ORDERED_ERROR_FILE"
##############################################################################

if [ "$CHECK_UNMATCHED" = "true" ]
then
  TOTAL_ERRORS=`echo $UNMATCHED_ERRORS`
fi
if [ $TOTAL_ERRORS -gt $critical ]
then
  echo -e "${COLOR_RED}CRITICAL: Exceeding number(${TOTAL_ERRORS}) of errors.|$MATCH_NAME=$TOTAL_ERRORS;$warning;$critical;0;0${COLOR_NONE}"
  exit 2
fi
if [ $TOTAL_ERRORS -ge $warning ]
then
  echo -e "${COLOR_LIGHT_RED}WARNING: More errors matched than expected (${TOTAL_ERRORS}).|$MATCH_NAME=$TOTAL_ERRORS;$warning;$critical;0;0${COLOR_NONE}"
  exit 1
fi
if [ $TOTAL_ERRORS -lt $warning ]
then
  echo "OK: Error matches normal with  ${TOTAL_ERRORS} errors. |$MATCH_NAME=$TOTAL_ERRORS;$warning;$critical;0;0"
  exit 0
fi
